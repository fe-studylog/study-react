
npm init react-app 폴더명

node_modules : 리액트 프로젝트를 개발하기 위해 기본적으로 필요한 다양한 JavaScript module
public : index.html 과 로고 등 정적 파일이 있음
src : 여기에 리액트 코드를 개발
package.json : 생성한 전체 프로젝트에 대한 정보를 갖고 있음

npm start <= package.json에 "scripts" 안에 명령어를 실행
                            "eslintConfig" : code 가 올바르게 작동하고 있는지 확인

* npm start 하면 index.js가 제일 먼저 실행됨

const root = ReactDOM.createRoot(document.getElementById('root'));  // index.html에서 root를 찾아서 루트로 만들어
root.render(
  <React.StrictMode>  // 자바스크립트 엄격 모드 사용
    <App />
  </React.StrictMode>
);                           // index.html의 <div id="root">  </div> 사이에 <APP />을 렌더링시킴
                                                                            => App.js에 음

import React from "react"; -> jsx문법을 사용하기 위해 작성



** 리액트 컴포넌트 만드는 두 가지 **

** 함수형 컴포넌트 : 함수 이용

-> import React from "react";
   
   function Home(){           // const Home = () => {   화살표 함수
     return <h1>Home 화면 입니다.</h1>
   }

   export default Home;

** 클래스형 컴포넌트 : 요즘 많이 사용하는 추세

-> import React, {Component} from "react"; 

   class Home extends Component {
       render() {
           return <h1>Home 화면 입니다.</h1>;
       }
   }

   export default Home;

// 리액트에서 클래스는 className="클래스명" 으로 넣는다.
// 리액트는 Single Page Appication 이다. 
   예를 들어, index.html 하나인데 네비 메뉴를 클릭할 때마다 
   <div id="root">   </div> 사이에 필요한 내용(개발한 리액트 컴포넌)만 자바스크립트로 변경

라우팅 : 메뉴를 클릭할 때마다 우리가 원하는 컴포넌트를 매핑시킨 다음 보여주는 걸 라우팅 처리라고 함.
         즉, 브라우저 url이 바뀔 때마다 보여줄 컴포넌트를 매핑하고 그걸 렌더링하는 과정.

1. 라우팅 설치 : npm install react-router-dom@6
2. index.js 에 import {BrowserRouter} from 'react-router-dom'; 추가 
   BrowserRouter : 리액트에서 웹브라우저 라우팅할 때 가장 많이 쓰는 보편적인 라우터
3. <React.StrictMode>사이에 <BrowserRouter></BrowserRouter> 추가 </React.StrictMode>
4.  App.js 에
   import React from "react";
   import {Routes, Route, Link} from "react-router-dom"; 추가

   <div className="App> 안에
     <nav>
       <Link to="/">Home</Link>
       <Link to="/">About</Link>
     </nav>     추가
     <Routes>
       <Route path="/" element={<Home />}>
       <Route path="/" element={<About />}>
     </Routes>  추가
   </div>

   => Link to 에 지정되어 있는 값과 똑같은 path의 값을 갖고 있는 라우트를 찾아서 
      해당 Route의 element에 할당되어 있는 리액트 컴포넌트를 보여주게 됨
      => 화면엔 <nav>태그 바로 밑에 <Routes> 보여짐
  
    
